/*
* 有 $N$ 种物品和一个容量是 $V$ 的背包。

第 $i$ 种物品最多有 $s\_i$ 件，每件体积是 $v\_i$，价值是 $w\_i$。

求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。
输出最大价值。

#### 输入格式

第一行两个整数，$N，V$，用空格隔开，分别表示物品种数和背包容积。

接下来有 $N$ 行，每行三个整数 $v\_i, w\_i, s\_i$，用空格隔开，分别表示第 $i$ 种物品的体积、价值和数量。

#### 输出格式

输出一个整数，表示最大价值。

#### 数据范围

$0 \\lt N \\le 1000$
$0 \\lt V \\le 2000$
$0 \\lt v\_i, w\_i, s\_i \\le 2000$

##### 提示：

本题考查多重背包的二进制优化方法。

#### 输入样例

	4 5
	1 2 3
	2 4 1
	3 4 3
	4 5 2


#### 输出样例：

	10
*/

#include <vector>
#include <iostream>
#include <queue>
using namespace std;
const int N = 1010;
struct Good {
	int v, w;
}g[N];
int f[N * 2];
int n, m;
int main() {
	ios::sync_with_stdio(false);
	vector<Good> vec;
	cin >> n >> m;
	for (int i = 0; i < n; i++) {
		int v, w, s;
		cin >> v >> w >> s;
		for (int k = 1; k <= s; k++) {
			s -= k;
			vec.emplace_back(Good{ v * k,w * k });
		}
		if (s > 0)vec.emplace_back(Good{ v * s,w * s });
	}
	for (auto i : vec)
		for (int j = m; j >= i.v; --j)
			f[j] = max(f[j], f[j - i.v] + i.w);
	cout << f[m] << endl;
	return 0;
}